<?xml version="1.0" standalone="yes"?>
<generator name="JavaScript">
    <code_localization />

    <!--
    ****************************************************************************
    Escape sequences
    ****************************************************************************
    -->

    <!-- Backslash must be double-quoted -->
    <escape-sequence for="\" do="\\" />
    <!-- Escape double quotation marks -->
    <escape-sequence for="&#x22;" do="\&#x22;" />

    <!--
    ****************************************************************************
    Value-stack templates
    ****************************************************************************
    -->

    <vstack_def_type>any</vstack_def_type>
    <vstack_term_type>any</vstack_term_type>
    <vstack_union_att>@@value-type-id</vstack_union_att>
    <vstack_union_def>@@attribute: null, </vstack_union_def>
    <vstack_single>value: null</vstack_single>
    <vstack_union_start>value: {</vstack_union_start>
    <vstack_union_end>}</vstack_union_end>

    <!--
    ****************************************************************************
    Semantic action templates
    ****************************************************************************
    -->

    <action_start>parse_@@production-number() {
</action_start>
    <action_end>	;
}

</action_end>

    <action_single>this.stack[ this.stack.length - ( @@offset + 1 ) ].value</action_single>

    <action_union>this.stack[ this.stack.length - ( @@offset + 1 ) ].value.@@attribute</action_union>
    <action_lhs_single>this.ret</action_lhs_single>
    <action_lhs_union>this.ret.@@attribute</action_lhs_union>

    <action_set_lhs>this.lhs = @@sym</action_set_lhs>

    <!--
    ****************************************************************************
    Semantic terminal action templates
    ****************************************************************************
    -->

    <scan_action_start>scan_@@production-number() {
</scan_action_start>
    <scan_action_end>	;
}

</scan_action_end>

    <scan_action_begin_offset>this.buf</scan_action_begin_offset>
    <scan_action_end_offset>this.len</scan_action_end_offset>
    <scan_action_ret_single>this.tos.value</scan_action_ret_single>
    <scan_action_ret_union>this.tos.value.@@attribute</scan_action_ret_union>

    <scan_action_set_symbol>( this.sym = @@sym )</scan_action_set_symbol>

    <!--
    ****************************************************************************
    Parse table templates
    ****************************************************************************
    -->

    <defprod>
        <col>@@production-number</col>
        <col_sep>, </col_sep>
    </defprod>

    <acttab>
        <row_start>				{ </row_start>
        <row_end> }</row_end>
        <row_sep>,&#x0A;</row_sep>
        <col>@@symbol: [ @@action,@@index ]</col>
        <col_sep>, </col_sep>
    </acttab>

    <gotab>
        <row_start>				{ </row_start>
        <row_end> }</row_end>
        <row_sep>,&#x0A;</row_sep>
        <col>@@symbol: [ @@action,@@index ]</col>
        <col_sep>, </col_sep>
    </gotab>

    <!--
    ****************************************************************************
    Lexer
    ****************************************************************************
    -->

    <dfa_select>
        <col>@@machine</col>
        <col_sep>, </col_sep>
    </dfa_select>

    <dfa_char>
        <col>@@from, @@to</col>
        <col_sep>, </col_sep>
    </dfa_char>

    <dfa_trans>
        <col>@@goto</col>
        <col_sep>, </col_sep>
    </dfa_trans>

    <dfa_idx>
        <row_start>				[ </row_start>
        <row_end> ]</row_end>
        <row_sep>,&#x0A;</row_sep>
        <col>@@index</col>
        <col_sep>, </col_sep>
    </dfa_idx>

    <dfa_accept>
        <row_start>				[ </row_start>
        <row_end> ]</row_end>
        <row_sep>,&#x0A;</row_sep>
        <col>@@accept</col>
        <col_sep>, </col_sep>
    </dfa_accept>

    <!--
    ****************************************************************************
    Symbol and production information tables
    ****************************************************************************
    -->

    <symbols>
        <col>				{ "symbol": "@@symbol-name", "emit": "@@emit", "is-terminal": @@type, "is-lexem": @@lexem, "is-whitespace": @@whitespace, "is-greedy": @@greedy }</col>
        <col_sep>,&#x0A;</col_sep>
    </symbols>

    <productions>
        <col>				{ "production": "@@production", "emit": "@@emit", "length": @@length, "left-hand-side": @@lhs }</col>
        <col_sep>,&#x0A;</col_sep>
    </productions>

    <!--
    ****************************************************************************
    JavaScript program
    ****************************************************************************
    -->

<file filename="@@basename.js">// Parser module generated by unicc from @@filename.
// DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!
@@prologue

class @@prefixNode {
    constructor(emit, match, children) {
        this.emit = emit;
        this.match = match;
        this.children = children;
    }

    dump(level) {
        if( level === undefined )
            level = 0;

        if( this.emit !== undefined ) {
            let txt = this.emit;

            for( let i = 0; i &lt; level; i++ )
                txt = " " + txt;

            if( this.match &amp;&amp; this.match !== this.emit )
                txt += " (" + this.match + ")";

            console.log(txt);
            level++;
        }

        if( this.children ) {
            for( let child of this.children )
                if( Boolean( child ) )
                    child.dump(level);
        }
    }
}

class @@prefixParserToken {
    constructor() {
        this.state = 0;
        this.line = 0;
        this.column = 0;

        this.node = null;

        @@value-type-definition
    }
}

// Defining a custom exception for parse errors
class @@prefixParseError extends Error {
    constructor(line, column, expecting) {
        super(`${line}:${column} Parse error, expecting '${expecting.join("', '")}'`);
        this.line = line;
        this.column = column;
        this.expecting = expecting;
    }
}

// Parser Control Block is used to handle parser states
class @@prefixParserControlBlock {
    constructor() {
        // Stack
        this.stack = [];
        this.tos = null;

        // Values
        this.ret = null;

        // State
        this.act = null;
        this.idx = null;
        this.lhs = null;

        // Lookahead
        this.sym = -1;
        this.old_sym = -1;
        this.len = 0;

        // Lexical analysis
        this.lexem = null;
        this.next = null;
        this.eof = null;
        this.is_eof = false;

        // Input buffering
        this.input = null;
        this.buf = "";

        // Error handling
        this.error_delay = 3;
        this.error_count = 0;

        this.line = 1;
        this.column = 1;

        // User-defined
        @@pcb
    }

    get top() {
        return @@top-value;
    }

    set top(value) {
        @@top-value = value;
    }

    // Parsing actions

    @@scan_actions
    @@actions
}

// Parser

export default class @@prefixParser {
    static #grammar = {
        "symbols": [
@@symbols
        ],
        "productions": [
@@productions
        ],
        "goal": @@goal
    };

    static #lexer = {
        "select": [
            @@dfa-select
        ],
        "index": [
@@dfa-index
        ],
        "chars": [
@@dfa-char
        ],
        "transitions": [
@@dfa-trans
        ],
        "accept": [
@@dfa-accept
        ]
    };
    static #parser = {
        "action": [
@@action-table
        ],
        "goto": [
@@goto-table
        ],
        "default-production": [
            @@default-productions
        ]
    };
    
    // Get character
    static #get_char(pcb) {
        // Get next character from input stream
        if( typeof pcb.input === "function" )
            return pcb.input();

        let ch = pcb.eof;

        if( pcb.input.length > 0 ) {
            ch = pcb.input[0];
            pcb.input = pcb.input.slice(1);
        }

        return ch;
    }

    static #get_input(pcb, offset) {
        // Input buffering
        while( offset &gt;= pcb.buf.length ) {
            if( pcb.is_eof )
                return pcb.eof;

            let ch = this.#get_char(pcb);
            if( ch === pcb.eof ) {
                pcb.is_eof = true;
                return pcb.eof;
            }

            pcb.buf += ch;
        }

        //console.log("#get_input %s, %d, %s, %d", pcb.buf, offset, pcb.buf.charAt(offset), pcb.buf.charCodeAt(offset))

        return pcb.buf.charCodeAt(offset);
    }

    static #clear_input(pcb) {
        // Purge input from buffer that is not necessary anymore

        if( pcb.buf.length ) {
            // Perform position counting.
            for( let pos = 0; pos &lt;= pcb.len; pos++ ) {
                if( pcb.buf[pos] === '\n' ) {
                    pcb.line++;
                    pcb.column = 0;
                }
                else
                    pcb.column++;
            }

            pcb.buf = pcb.buf.slice( pcb.len );
        }

        pcb.len = 0;
        pcb.sym = -1;
    }

    static #lex(pcb) {
        // Perform lexical analysis
        let state = 0, length = 0;

        let machine = Boolean(@@mode) ? 0 : this.#lexer["select"][pcb.tos.state];
        let next = this.#get_input(pcb, length);

        if( next === pcb.eof ) {
            pcb.sym = @@eof;
            return;
        }

        while( state &gt; -1 &amp;&amp; next !== pcb.eof ) {
            let idx = this.#lexer["index"][machine][state];
            state = -1;

            while( this.#lexer["chars"][idx * 2] &gt; -1 ) {
                if( next &gt;= this.#lexer["chars"][idx * 2]
                        &amp;&amp; next &lt;= this.#lexer["chars"][idx * 2 + 1] ) {

                    length++;
                    state = this.#lexer["transitions"][idx];

                    if( this.#lexer["accept"][machine][state] &gt; 0 ) {
                        pcb.sym = this.#lexer["accept"][machine][state] - 1;
                        pcb.len = length;

                        // Test! (??)
                        if( pcb.sym === @@eof ) {
                            state = -1;
                            break;
                        }

                        // Stop if matched symbol should be parsed nongreedy
                        if( !Boolean(this.#grammar["symbols"][pcb.sym]["is-greedy"]) ) {
                            state = -1;
                            break;
                        }
                    }

                    next = this.#get_input(pcb, length);
                    break;
                }

                idx++;
            }

            // TODO: Semantic Terminal Selection?
        }

        //console.log("lex sym = %d, len = %d", pcb.sym, pcb.len);
    }

    static #get_sym(pcb) {
        // Get lookahead symbol
        pcb.sym = -1;
        pcb.len = 0;

        // insensitive mode
        if( Boolean(@@mode) )
            while( true )
            {
                this.#lex(pcb);

                // check for whitespace
                if( pcb.sym &gt; -1 &amp;&amp; Boolean(this.#grammar["symbols"][pcb.sym]["is-whitespace"]) ) {
                    this.#clear_input(pcb);
                    continue;
                }

                break;
            }

        // sensitive mode
        else if( this.#lexer["select"][pcb.tos.state] &gt; -1 )
            this.#lex(pcb);

        // If there is no matching DFA state machine, try to identify the
        // end-of-file symbol. If this also fails, a parse error will raise.
        else if( this.constructor.#get_input(pcb, 0) === pcb.eof )
            pcb.sym = @@eof;

        return Boolean(pcb.sym &gt; -1);
    }

    parse(s) {
        // Constants
        const ERROR		= 0;
        const REDUCE	= 1;
        const SHIFT		= 2;
        const SUCCESS	= 4;

        // Start of parse function
        let pcb = new @@prefixParserControlBlock()
        pcb.input = s
        pcb.act = SHIFT;

        pcb.tos = new @@prefixParserToken()
        pcb.stack.push(pcb.tos)

        while( true ) {
            //console.log("state = %d", pcb.tos.state);

            // Reduce
            while( pcb.act &amp; REDUCE ) {
                // Set default left-hand side
                pcb.lhs = this.constructor.#grammar["productions"][pcb.idx]["left-hand-side"];

                //console.log("REDUCE idx = %d, prod = %s", pcb.idx, this.constructor.#grammar["productions"][pcb.idx]["production"]);
                // print("state", pcb.tos.state);

                // Call reduce function
                //console.log("CALL", "_reduce_action_%d" % pcb.idx)

                if( ( "parse_" + pcb.idx ) in pcb )
                    pcb[ "parse_" + pcb.idx ]();

                // Drop right-hand side
                let cnodes = null, node = null;

                for( let i = 0; i &lt; this.constructor.#grammar["productions"][pcb.idx]["length"]; i++ ) {
                    let item = pcb.stack.pop();

                    if( item.node )
                    {
                        if( cnodes === null )
                            cnodes = [];

                        if( Array.isArray( item.node ) )
                            cnodes = item.node.concat(cnodes);
                        else
                            cnodes.unshift(item.node);
                    }
                }

                pcb.tos = pcb.stack[pcb.stack.length - 1];
                pcb.tos.value = pcb.ret;

                // Handle AST nodes
                if( Boolean( this.constructor.#grammar["productions"][pcb.idx]["emit"] ) ) {
                    //console.log("%s = %s", this.constructor.#grammar["productions"][pcb.idx]["production"], this.#grammar["productions"][pcb.idx]["emit"]);
                    node = new @@prefixNode(this.constructor.#grammar["productions"][pcb.idx]["emit"], null, cnodes);
                }

                // Goal symbol reduced, and stack is empty?
                if( pcb.lhs === @@goal &amp;&amp; pcb.stack.length === 1 ) {
                    pcb.tos.node = node ? node : cnodes;
                    this.constructor.#clear_input(pcb);
                    pcb.act = SUCCESS;
                    break;
                }

                // Get goto table entry
                pcb.act = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][0];
                pcb.idx = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][1];

                pcb.tos = new @@prefixParserToken();
                pcb.stack.push(pcb.tos)

                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.lhs];
                pcb.tos.state = pcb.act &amp; REDUCE ? -1 : pcb.idx;
                pcb.tos.value = pcb.ret;

                pcb.tos.node = node ? node : cnodes;
                pcb.tos.value = pcb.ret;

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
            }

            if( pcb.act === SUCCESS || pcb.act === ERROR )
                break;

            // Get next input symbol
            this.constructor.#get_sym(pcb);

            //console.log("pcb.sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);
            //console.log("pcb.len = %d", pcb.len);

            // Get action table entry
            if( pcb.sym in this.constructor.#parser["action"][pcb.tos.state] ) {
                pcb.act = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][0];
                pcb.idx = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][1];
            } else {
                // Otherwise, apply default production
                pcb.idx = this.constructor.#parser["default-production"][pcb.tos.state];

                if( pcb.idx &gt; -1 ) {
                    pcb.act = REDUCE;
                }
                else {
                    pcb.act = 0;
                }
            }

            if( !pcb.act ) {
                throw new @@prefixParseError(
                    pcb.line,
                    pcb.column,
                    Object.keys(
                        this.constructor.#parser["action"][pcb.tos.state]
                    ).map(sym => this.constructor.#grammar.symbols[sym].symbol).sort()
                );
            }

            // Shift
            if( pcb.act &amp; SHIFT ) {
                //console.log("SHIFT sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);

                pcb.tos = new @@prefixParserToken();
                pcb.stack.push(pcb.tos);

                // Execute scanner actions, if existing.
                if( ( "scan_" + pcb.idx ) in pcb )
                    pcb[ "parse_" + pcb.idx ]();

                pcb.tos.state = pcb.act &amp; REDUCE ? -1 : pcb.idx;
                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.sym];

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
                pcb.top = pcb.buf.slice(0, pcb.len);

                if( Boolean( pcb.tos.symbol["emit"] ) )
                    pcb.tos.node = new @@prefixNode(pcb.tos.symbol["emit"], pcb.top);

                if( pcb.sym !== @@eof &amp;&amp; pcb.sym !== @@error ) {
                    this.constructor.#clear_input(pcb);
                    pcb.old_sym = -1
                }
            }
        }

        if( !pcb.ret &amp;&amp; pcb.tos.node ) {
            if( Array.isArray( pcb.tos.node ) ) {
                if( pcb.tos.node.length &gt; 1 )
                    return new @@prefixNode(null, null, pcb.tos.node);
                else
                    return pcb.tos.node.pop();
            }

            return pcb.tos.node;
        }

        return pcb.ret;
    }
}

@@epilogue
</file>
</generator>
