// UniCC's own grammar parser

#!mode            scannerless ;
#!language        C ;

/*
 * Parser configuration
 */
#whitespaces            whitespace;
#lexeme                 terminal identifier modifier code ccl_string kw bkw type;
#lexeme separation      on;
#default action         [* @@ = @1; *];
#default epsilon action [* @@ = 0; *];

#pcb [*
    pboolean main;
    char* filename;
    char* src;
    char* capture;
*];

/*
 * Prologue
 */

//Begin of Prologue ------------------------------------------------------------
#prologue [*

#include "unicc.h"

struct @@prefix_rhs_item
{
    SYMBOL* sym;
    char* ident;
};



#ifndef MALLOC_STEP
#define MALLOC_STEP 255
#endif

/*
int echo_char(char c) {
    printf(">%c< (%d)\n", c, c);
    return c;
}

#define UNICC_GETCHAR( pcb ) echo_char( *pcb->src ? *(pcb->src++) : *pcb->src )
*/
#define UNICC_GETCHAR( pcb ) ( *pcb->src ? *(pcb->src++) : *pcb->src )
#define UNICC_PARSE_ERROR( pcb ) parse_error( pcb )

extern int error_count;

static int prec_cnt = 1; /* Precedence level */
static int last_code_begin; /* Last code begin */
static int embedded_count = 0;
static PROD* current_prod = (PROD*)NULL;
static SYMBOL* current_sym = (SYMBOL*)NULL;
static BOOLEAN greedy = TRUE;
static PARSER* parser;

char* ustrndup( char* origin, char* start, size_t n ) {
    char* ret = pstrndup(start, n);
    fprintf( stderr, "%s = >%s<\n", origin, ret );
    return ret;
}

/* Set precedence and associativiy */
static void set_assoc_and_prec( LIST* symbols, int assoc )
{
    LIST* l;
    SYMBOL* sym;

    for( l = symbols; l; l = l->next )
    {
        sym = l->pptr;
        sym->prec = prec_cnt;
        sym->assoc = assoc;
    }

    list_free( symbols );
    prec_cnt++;
}


static void make_semantic_rhs( PROD* p )
{
    if( current_prod && current_prod->rhs )
        plist_concat( p->sem_rhs, current_prod->rhs );

    plist_concat( p->sem_rhs, p->rhs );
}

static void parse_error();

*];
//End of Prologue --------------------------------------------------------------

/*
 * Grammar
 */

grammar_spec$       : fixed_directive_def* segment*
                    ;

fixed_directive_def : "#!" fixed_directive ';'
                    | "%!" fixed_directive ';'
                    ;

fixed_directive     : "mode" mode_type
                    | "language" string_or_ident
                        [*
                            if( !( parser->p_template ) )
                                parser->p_template = @2;
                            else if( !pcb->main )
                                print_error( parser, ERR_DIRECTIVE_ALREADY_USED,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            "!language" );
                        *]

                    //TODO: Must be reworked!
                    /*
                    | "character universe" integer

                        [*
                            int universe = @2;

                            if( universe > 0 )
                                parser->p_universe = universe;
                            else
                                print_error( parser, ERR_INVALID_CHAR_UNIVERSE,
                                    ERRSTYLE_FATAL | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line, );
                        *]
                    */
                    ;

mode_type           : "scannerless"
                        [* parser->p_mode = MODE_SCANNERLESS; *]
                    | "scanner"
                        [* parser->p_mode = MODE_SCANNER; *]
                    ;

segment             : code
                    | definition ';'
                    | unfixed_directive ';'
                    ;

unfixed_directive   : '#%' directive_parms
                    ;

directive_parms     : "whitespaces" symbol_list
                        [*
                            LIST* l;
                            SYMBOL* s;

                            for( l = @2; l; l = l->next )
                            {
                                s = l->pptr;

                                /* Do not allow nonterminal definitions here
                                    in conext-free model */
                                if( s->type == SYM_NON_TERMINAL &&
                                    parser->p_mode !=
                                        MODE_SCANNERLESS )
                                {
                                    print_error( parser, ERR_NONTERM_WS_NOT_ALLOWED,
                                        ERRSTYLE_FATAL | ERRSTYLE_FILEINFO,
                                                pcb->filename, pcb->line,
                                                    s->name );
                                }
                                else
                                    s->whitespace = TRUE;
                            }

                            list_free( @2 );
                        *]

                    | "lexeme" symbol_list
                        [*
                            LIST* l;
                            SYMBOL* s;


                            /* Ouput a warning, if this definition
                                is effectless */
                            if( parser->p_mode != MODE_SCANNERLESS )
                            {
                                print_error( parser, ERR_NO_EFFECT_IN_MODE,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line, "lexeme" );
                            }
                            else
                            {
                                for( l = @2; l; l = l->next )
                                {
                                    s = l->pptr;
                                    s->lexem = TRUE;
                                }
                            }

                            list_free( @2 );
                        *]

                    | "fixate" symbol_list
                        [*
                            LIST* l;
                            SYMBOL* s;

                            /* Ouput a warning, if this definition
                                is effectless */
                            if( parser->p_mode != MODE_SCANNERLESS )
                            {
                                print_error( parser, ERR_NO_EFFECT_IN_MODE,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line, "fixate" );
                            }
                            else
                            {
                                for( l = @2; l; l = l->next )
                                {
                                    s = l->pptr;
                                    s->fixated = TRUE;
                                }
                            }

                            list_free( @2 );
                        *]

                    | "left" symbol_list
                        [* set_assoc_and_prec( @2, ASSOC_LEFT ); *]


                    | "right" symbol_list
                        [* set_assoc_and_prec( @2, ASSOC_RIGHT ); *]


                    | "nonassoc" symbol_list
                        [* set_assoc_and_prec( @2, ASSOC_NOASSOC ); *]

                    | "prefix" string
                        [* parser->p_prefix = @2 *]

                    | "default action" code_opt
                        [*  if( !( parser->p_def_action ) )
                                parser->p_def_action = @2;
                            else
                                print_error( parser, ERR_DIRECTIVE_ALREADY_USED,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            "default epsilon action" );
                        *]

                    | "default epsilon action" code_opt
                        [*  if( !( parser->p_def_action_e ) )
                                parser->p_def_action_e = @2;
                            else
                                print_error( parser, ERR_DIRECTIVE_ALREADY_USED,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            "default epsilon action" );
                        *]

                    | "default value type" type
                        [*    if( !( parser->p_def_type ) )
                                parser->p_def_type = create_vtype(
                                    parser, (char*)@type );
                            else
                                print_error( parser, ERR_DIRECTIVE_ALREADY_USED,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            "default value type" );

                            pfree( @type );
                        *]

                    | "lexeme separation" boolean_opt
                        [*    /* Ouput a warning, if this definition
                                is effectless */
                            if( parser->p_mode != MODE_SCANNERLESS )
                            {
                                print_error( parser, ERR_NO_EFFECT_IN_MODE,
                                    ERRSTYLE_WARNING | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            "lexem separation" );
                            }
                            else
                                parser->p_lexem_sep = !@2;
                        *]

                    | "case insensitive strings" boolean_opt
                        [*    parser->p_cis_strings = !@2;    *]

                    | "reserve terminals" boolean_opt
                        [*    parser->p_reserve_regex = !@2;        *]

                    | "prologue" code
                        [* parser->p_header = @2 *]

                    | "epilogue" code
                        [* parser->p_footer = @2 *]
                    | "pcb" code
                        [* parser->p_pcb = @2 *]

                    | "extends" string:filename

                        [*
                            char*    src;

                            if( !pfiletostr( &src, @filename ) )
                            {
                                print_error( parser, ERR_OPEN_INPUT_FILE,
                                                ERRSTYLE_FATAL, @filename );
                            }
                            else
                            {
                                parse_grammar( parser, @filename, src );
                                pfree( src );
                            }

                            pfree( @filename );
                        *]

                    ;

boolean_opt<BOOLEAN>:   boolean
                    |   [* @@ = FALSE; *]
                    ;

boolean<BOOLEAN>    :   "on"    [* @@ = FALSE; *]
                    |   "off"   [* @@ = TRUE; *]
                    ;

symbol_list<LIST*>  :   symbol_list sym
                        [* @@ = list_push( @1, (void*)@2 ); *]
                    |   sym
                        [* @@ = list_push( (LIST*)NULL, (void*)@1 ); *]
                    ;

lhs<SYMBOL*>        :   identifier
                        [*
                            @@ = get_symbol( parser, @identifier, SYM_NON_TERMINAL, TRUE );
                            @@->defined = TRUE;
                            @@->line = pcb->line;

                            pfree( @identifier );
                        *]
                    ;

alt_lhs_list<LIST*> : alt_lhs_list lhs
                        [* @@ = list_push( @1, (void*)@2 ); *]
                    | lhs
                        [* @@ = list_push( (LIST*)NULL, (void*)@1 ); *]
                    ;

alt_regex_sym<LIST*>: alt_regex_sym regex_sym
                        [*  @@ = list_push( @alt_regex_sym,
                                    (void*)@regex_sym );
                            @regex_sym->derived_from =
                                (SYMBOL*)list_access( @alt_regex_sym );
                        *]
                    | regex_sym
                        [*  @@ = list_push( (LIST*)NULL,
                                    (void*)@regex_sym );

                            current_sym = @regex_sym;
                        *]
                    ;

regex_sym<SYMBOL*>  :   identifier
                        [*
                            @@ = get_symbol( parser, @identifier, SYM_REGEX_TERMINAL, TRUE );

                            if( @@->defined )
                            {
                                print_error( parser, ERR_DOUBLE_TERMINAL_DEF,
                                    ERRSTYLE_FATAL | ERRSTYLE_FILEINFO,
                                        pcb->filename, pcb->line,
                                            @identifier );
                            }

                            @@->defined = TRUE;
                            @@->line = pcb->line;

                            pfree( @identifier )
                        *]
                    ;

defines<BOOLEAN>    : "->"  [* @@ = FALSE; *]
                    | ':'   [* @@ = FALSE; *]
                    | "=>"  [* @@ = TRUE; *]    // Defines ast node
                    | ":="  [* @@ = TRUE; *]    // Defines ast node
                    ;

definition          :   lhs:primary
                        goal_mark:is_goal
                        alt_lhs_list?:all type
                        defines productions

                        [*
                            LIST*     l;
                            LIST*    m;
                            PROD*     p;
                            SYMBOL*    lhs;
                            VTYPE*    vt        = (VTYPE*)NULL;

                            @all = list_push( @all, (void*)@primary );

                            /* Value type */
                            if( @type )
                            {
                                vt = create_vtype( parser,
                                        (char*)@type );

                                pfree( @type );
                            }

                            /* Connect left-hand sides */
                            for( l = @all; l; l = list_next( l ) )
                            {
                                lhs = (SYMBOL*)list_access( l );

                                LISTFOR( @productions, m )
                                    plist_push( lhs->productions,
                                        list_access( m ) );

                                lhs->vtype = vt;
                            }

                            /* Link productions with this left-hand sides */
                            for( l = @productions; l; l = l->next )
                            {
                                LIST* m;

                                p = (PROD*)list_access( l );

                                p->lhs = @primary;

                                LISTFOR( @all, m )
                                    plist_push( p->all_lhs, list_access( m ) );

                                /* AST */
                                if( @defines && !p->emit )
                                    p->emit = pstrdup( @primary->name );
                            }

                            list_free( @productions );
                            list_free( @all );

                            /* Goal primary defined? */
                            if( @is_goal && pcb->main )
                            {
                                if( parser->goal )
                                {
                                    print_error( parser, ERR_MULTIPLE_GOAL_DEF,
                                        ERRSTYLE_FATAL,
                                            parser->goal->name );
                                }
                                else
                                {
                                    parser->goal = @primary;
                                    parser->goal->used = TRUE;
                                }
                            }
                        *]

                    | '@' alt_regex_sym type regex code_opt ast_node
                            sym_option*

                        [*
                            SYMBOL* primary;
                            SYMBOL* s;
                            LIST* l;
                            VTYPE* vt;

                            primary = (SYMBOL*)list_access( @alt_regex_sym );

                            primary->ptn = @4;
                            primary->greedy = greedy;
                            primary->emit = @ast_node;

                            greedy = TRUE;

                            /* Attach code */
                            if( @code_opt )
                            {
                                /* Copy code for every symbol  */
                                for( l = @alt_regex_sym; l;
                                    l = list_next( l ) )
                                {
                                    s = (SYMBOL*)list_access( l );
                                    s->code = @code_opt;
                                    primary->code_at = last_code_begin;
                                }
                            }

                            /* Value type */
                            if( @type )
                            {
                                vt = create_vtype( parser, @type );

                                for( l = @alt_regex_sym; l;
                                    l = list_next( l ) )
                                {
                                    s = (SYMBOL*)list_access( l );
                                    s->vtype = vt;
                                }

                                pfree( @type );
                            }

                            /* re_dbg_print_nfa( s->nfa_def,
                                parser->p_universe ); */

                            /* Assign the list of all possible symbols to
                                the primary symbol */
                            LISTFOR( @alt_regex_sym, l )
                                plist_push( primary->all_sym,
                                    list_access( l ) );

                            current_sym = (SYMBOL*)NULL;
                        *]
                    ;

sym_option           :    '#%' "greedy"
                        [* greedy = TRUE; *]
                    |    '#%' "non-greedy"
                        [* greedy = FALSE; *]
                    ;

goal_mark<BOOLEAN>  : '$'
                        [* @@ = TRUE; *]
                    |
                        [* @@ = FALSE; *]
                    ;

productions<LIST*>  :   productions '|' production
                        [* @@ = list_push( @1, @3 ); *]

                    |   production
                        [* @@ = list_push( (LIST*)NULL, @1 ); *]
                    ;

ast_node<char*>     :    '=' identifier
                        [* @@ = @identifier; *]
                    |    '=' string
                        [* @@ = @string *]
                    |
                        [* @@ = (char*)NULL; *]
                    ;

production<PROD*>   :    line_number rhs_opt:rhs code_opt:act
                            ast_node
                            prod_directives*
                        [*
                            @rhs->line = @line_number;

                            if( @act )
                            {
                                @rhs->code = @act;
                                @rhs->code_at = last_code_begin;
                            }

                            @rhs->emit = @ast_node;

                            @@ = @rhs;

                            current_prod = (PROD*)NULL;
                        *]
                    ;

rhs_opt<PROD*>      :    rhs
                    |   [*
                            @@ = current_prod = create_production( parser,
                                    (SYMBOL*)NULL );
                        *]
                    ;

prod_directives<int>:     '#%' "precedence" terminal

                        [*    current_prod->prec = @terminal->prec; *]

                    ;

rhs<PROD*>            :    rhs symbol access_name

                        [*
                            append_to_production( @rhs, @symbol, @access_name );
                            @@ = @1;
                        *]

                    |    symbol access_name

                        [*    @@ = current_prod =
                                create_production( parser,
                                    (SYMBOL*)NULL );

                            append_to_production( @@, @symbol, @access_name);
                        *]
                    ;

symbol<SYMBOL*>        :    sym modifier

                        [*
                            switch( @2 )
                            {
                                case '*':
                                    @@ = kleene_closure( parser, @1 );
                                    break;
                                case '+':
                                    @@ = positive_closure( parser, @1 );
                                    break;
                                case '?':
                                    @@ = optional_closure( parser, @1 );
                                    break;
                                default:
                                    @@ = @1;
                                    break;
                            }
                        *]

                    |    "&error"

                        [*    @@ = get_symbol( parser,
                                    P_ERROR_RESYNC, SYM_SYSTEM_TERMINAL,
                                        TRUE );
                        *]

                    |    "&eof"

                        [*    @@ = get_symbol( parser,
                                    P_END_OF_FILE, SYM_SYSTEM_TERMINAL,
                                        TRUE );
                        *]
                    ;

sym<SYMBOL*>        : terminal

                    | identifier

                        [*
                            @@ = get_symbol( parser, @identifier, SYM_NON_TERMINAL, TRUE );
                            @@->used = TRUE;

                            if( @@->line < 0 )
                                @@->line = pcb->line;

                            pfree( @identifier );
                        *]

                    //Embedded productions
                    | type '(' stack_cur_prod productions ')'

                        [*
                            char    temp_nonterm[ ONE_LINE + 1 ];
                            PROD*    prod;
                            LIST*    l;

                            sprintf( temp_nonterm, P_EMBEDDED,
                                    embedded_count++ );

                            @@ = get_symbol( parser,
                                    temp_nonterm, SYM_NON_TERMINAL,
                                        TRUE );
                            @@->defined = TRUE;
                            @@->used = TRUE;
                            @@->generated = TRUE;

                            /* Value type */
                            if( @type )
                            {
                                VTYPE*    vt;

                                vt = create_vtype( parser,
                                        (char*)@type );
                                @@->vtype = vt;

                                pfree( @type );
                            }

                            /* Associate the productions */
                            current_prod = @stack_cur_prod;

                            /* Link productions with this left-hand side */
                            for( l = @productions; l; l = list_next( l ) )
                            {
                                prod = (PROD*)list_access( l );

                                prod->lhs = @@;
                                plist_push( @@->productions, prod );
                                plist_push( prod->all_lhs, @@ );
                                make_semantic_rhs( prod );
                            }
                        *]
                    ;

stack_cur_prod<PROD*>
                    :    [*     @@ = current_prod;
                            current_prod = (PROD*)NULL;
                        *]
                    ;

terminal<SYMBOL*>   :   ccl

                        [*
                            @@ = get_symbol( parser, (void*)@ccl, SYM_CCL_TERMINAL, TRUE );

                            @@->defined = TRUE;
                            @@->used = TRUE;

                            if( @@->line < 0 )
                                @@->line = pcb->line;
                        *]

                    |   kw

                        [*
                            @@ = get_symbol( parser, @kw, SYM_REGEX_TERMINAL, TRUE );

                            @@->used = TRUE;
                            @@->defined = TRUE;
                            @@->keyword = TRUE;

                            @@->ptn = pregex_ptn_create_string( @kw,
                                        parser->p_cis_strings ?
                                            PREGEX_COMP_INSENSITIVE : 0 );

                            if( @@->line < 0 )
                                @@->line = pcb->line;

                            pfree( @kw )
                        *]

                    |   bkw

                        [*
                            @@ = get_symbol( parser, @bkw, SYM_REGEX_TERMINAL, TRUE );

                            @@->used = TRUE;
                            @@->defined = TRUE;
                            @@->keyword = TRUE;
                            @@->emit = @bkw;

                            @@->ptn = pregex_ptn_create_string( @bkw,
                                        parser->p_cis_strings ?
                                            PREGEX_COMP_INSENSITIVE : 0 );

                            if( @@->line < 0 )
                                @@->line = pcb->line;
                        *]

                    |   '@' identifier

                        [*
                            @@ = get_symbol( parser, @identifier, SYM_REGEX_TERMINAL, TRUE );

                            /* @@->defined = TRUE;
                            DO NOT SET DEFINED! */
                            @@->used = TRUE;

                            if( @@->line < 0 )
                                @@->line = pcb->line;

                            pfree( @identifier );
                        *]
                    ;

modifier<int>       :   '*'
                        [*  @@ = (int)'*'; *]

                    |   '+'
                        [* @@ = (int)'+'; *]

                    |   '?'
                        [* @@ = (int)'?'; *]

                    |
                        [* @@ = 0; *]

                    ;

access_name<char*>  :   ':' identifier      [* @@ = @identifier *]
                    |   ':' string          [* @@ = @string *]
                    |                       [* @@ = NULL *]
                    ;

/* Regular Expression parser and NFA generator */
regex<pregex_ptn*>  :    re_alt
                    ;

re_alt<pregex_ptn*> :    re_alt '|' re_expr

                        [*
                            @@ = pregex_ptn_create_alt(
                                    @1, @3, (pregex_ptn*)NULL );
                        *]

                    | re_expr

                    ;

re_expr<pregex_ptn*>:    re_expr re_modifier

                        [*
                            @@ = pregex_ptn_create_seq(
                                    @1, @2, (pregex_ptn*)NULL );
                        *]

                    |   re_modifier

                    ;

re_modifier<pregex_ptn*>
                    :    re_factor '*'

                        [*
                            @@ = pregex_ptn_create_kle( @1 );
                        *]

                    |   re_factor '+'

                        [*
                            @@ = pregex_ptn_create_pos( @1 );
                        *]

                    |   re_factor '?'

                        [*
                            @@ = pregex_ptn_create_opt( @1 );
                        *]

                    |   re_factor
                ;

re_factor<pregex_ptn*>
                :    ccl

                    [*
                        @@ = pregex_ptn_create_char( @ccl );
                        pfree( @ccl )
                    *]

                |   kw

                    [*
                        @@ = pregex_ptn_create_string( @kw, 0 );
                        pfree( @kw )
                    *]

                |   '.'

                    [*
                        pccl*    ccl;
                        greedy = FALSE;

                        ccl = pccl_create( -1, -1, (char*)NULL );

                        pccl_addrange( ccl, PCCL_MIN, PCCL_MAX );

                        @@ = pregex_ptn_create_char( ccl );
                    *]

                |   '(' regex ')'

                    [*
                        @@ = pregex_ptn_create_sub( @2 );
                    *]
                ;

/* General parsing objects */

string<char*>   :   ccl_string | kw
                ;

ccl<pccl*>      :   ccl_string

                    [*
                        @@ = pccl_create( -1, -1, @ccl_string );
                        pfree(@ccl_string);
                    *]

                | '!' ccl_string

                    [*
                        @@ = pccl_create( -1, -1, @ccl_string );
                        pccl_negate( @@ );
                        pfree(@ccl_string);
                    *]
                ;


/* ------------------------------------- TODO: Must be re-designed... --- */
ccl_string<char*>
                :   '\'' ccl_str '\''
                    [* @@ = ustrndup( "ccl_string", pcb->capture, pcb->src - pcb->capture - 2 ) *]
                ;

ccl_str         :   ccl_str ccl_char
                |   [* pcb->capture = pcb->src - 2; *]
                ;

ccl_char        :   !'\\\''
                |   '\\' !'\0'
                ;

kw<char*>       :   '\"' kw_str '\"'
                    [* @@ = ustrndup( "kw", pcb->capture, pcb->src - pcb->capture - 2 ) *]
                ;

bkw<char*>      :   '\"' '\"' kw_str '\"' '\"'
                    [* @@ = ustrndup( "bkw", pcb->capture, pcb->src - pcb->capture - 3 ) *]
                ;

kw_str          :    kw_str kw_char
                |    [* pcb->capture = pcb->src - 2; *]
                ;

kw_char         :   !'\\"'
                |   '\\' !'\0'
                ;

type<char*>     :   '<' type_str '>'
                    [* @@ = ustrndup( "type", pcb->capture, pcb->src - pcb->capture - 2 ); *]
                |   [* @@ = (char*)NULL; *]
                ;

type_str        :   type_str !'>'
                |   [* pcb->capture = pcb->src - 2; *]
                ;

identifier<char*>
                :   identifier_start identifier_follow
                    [* @@ = ustrndup( "identifier", pcb->capture, pcb->src - pcb->capture - 2 ) *]
                ;

identifier_start:   'A-Za-z_'
                    [* pcb->capture = pcb->src - 3; *]
                ;

identifier_follow
                :   identifier_follow 'A-Za-z0-9_'
                |
                ;

string_or_ident<char*>
                :   string
                |   identifier
                ;

/* ------------------------------------- TODO: ...until here --- */

integer         :   integer '0-9'
                    [* @@ = atoi( pcb->capture ) *]

                |   '0-9'
                    [* pcb->capture = pcb->src - 1; *]
                ;

code_opt<char*> :   code
                |   [* @@ = NULL *]
                ;

code<char*>     :   "[*" line_number inner_code_opt "*]"
                    [*
                        if( !parser->p_template )
                        {
                            print_error( parser,
                                ERR_NO_TARGET_TPL_SUPPLY,
                                    ERRSTYLE_WARNING | ERRSTYLE_IMPORTANT
                                            | ERRSTYLE_FILEINFO,
                                        pcb->filename, @line_number );
                        }

                        @@ = ustrndup( "code", pcb->capture, pcb->src - pcb->capture - 2 - 1 )
                    *]
                ;

inner_code_opt  :   inner_code
                |
                ;

inner_code      :   inner_code anychar
                |   anychar
                    [* pcb->capture = pcb->src - 2; *]
                ;

whitespace      : ' '
                | '\t'
                | "/*" comment? "*/"
                | "//" ( !'\n' )* '\n'
                | '\r'
                | '\n'
                ;

comment         :   comment anychar
                |   anychar
                ;

anychar         :   !'\0'
                ;

line_number     :    [* @@ = pcb->line; *]
                ;

#epilogue       [*

static void parse_error( @@prefix_pcb* pcb )
{
    int i;
    char* expect = NULL;
    char* lookahead;
    char buf[ 255 + 1 ];

    for( i = 1; i < @@prefix_act[ pcb->tos->state ][0] * 3; i += 3 )
    {
        lookahead =  @@prefix_symbols[ _act[ pcb->tos->state ][i] ].name;

        if( strlen( lookahead ) < sizeof( buf ) - 4 + 1 )
        {
            if( i + 3 >= @@prefix_act[ pcb->tos->state ][0] * 3 )
            {
                if( expect )
                    sprintf( buf, " or %s", lookahead );
                else
                    strcpy( buf, lookahead );
            }
            else
                sprintf( buf, "%s%s", expect ? ", " : "", lookahead );

            expect = pstrcatstr( expect, buf, FALSE );
        }
        else
        {
            if( expect )
                expect = pstrcatstr( expect, ", (too long token)", FALSE );
            else
                expect = pstrcatstr( expect, "(too long token)", FALSE );
        }
    }

    printf( "state %d\n", pcb->tos->state );

    print_error( parser, expect ? ERR_PARSE_ERROR_EXPECT : ERR_PARSE_ERROR,
                ERRSTYLE_FATAL | ERRSTYLE_FILEINFO,
                    parser->filename, pcb->line,
                    pcb->sym == -1 ?
                        (char*)pcb->buf :  @@prefix_symbols[ pcb->sym ].name,
                    expect ? expect : "(unknown)" );
    pfree( expect );
}

int parse_grammar( PARSER* p, char* filename, char* src )
{
    @@prefix_pcb pcb;

    prec_cnt = 1;
    embedded_count = 0;

    memset( &pcb, 0, sizeof( pcb ) );
    pcb.src = src;
    pcb.filename = filename;
    pcb.main = MAKE_BOOLEAN( filename == p->filename );

    if( p && src )
    {
        parser = p;
        @@prefix_parse( &pcb );
    }

    return pcb.error_count + error_count;
}

*];
